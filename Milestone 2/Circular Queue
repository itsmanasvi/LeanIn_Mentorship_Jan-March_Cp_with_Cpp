class MyCircularQueue {
    vector <int> q;
    int size, front, rear;
public:
    MyCircularQueue(int k) {
        size=k;
        q.resize(k);
        front=-1;
        rear=-1;
    }
    bool isEmpty() {
        if(front==-1)
            return true;
        else
            return false;
    }
    
    bool isFull() {
       if((rear==size-1 && front==0)|| rear==front-1)
            return true;
        else
            return false; 
    }
    bool enQueue(int value) {
        if(isFull())
            return false;
        else if (front == -1) /* Insert First Element */
        {
            front = 0;
            rear = 0;
        }
        else if(rear==size-1 && front!=0)
        {
            rear=0;
        }
        else
        {
            ++rear;    
        }
        q[rear] = value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty())
        {   return false;}
        q[front]=-1;
        if(front==rear)
        {
            front=-1;
            rear=-1;
        }
        else if(front==size-1)
        {
            front=0;
        }
        else
        {   
            front++;
        }      
        return true;
    }
    
    int Front() {
        if(isEmpty())
            return -1;
        else
            return q[front];
    }
    
    int Rear() {
        if(isEmpty())
            return -1;
        else
            return q[rear];
    }
};
